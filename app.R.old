# neededpackages <- c("shiny", "shinyjs", "readr", "rstudioapi", "DT", "openair", "dplyr")
# if (length(neededpackages[!(neededpackages %in% rownames(installed.packages()))]) != 0)
# {
#   #since there is no way to check the number of CPU cores on a given computer before
#   #installing external packages I am hard coding Ncore = 2 into this line.
#   install.packages(neededpackages[!(neededpackages %in% rownames(installed.packages()))],
#                    repos = "CRAN", dependencies = T, Ncpus = 2)
# }

#library(shiny)
#library(shinyjs)
#library(DT)
#library(openair)
#library(dplyr)
wbcolnames <- NA
wr <- NA
outputextnsions <- list("png", "bmp", "jpeg", "tiff", "eps", "pdf", "ps")

this_dir <- function(directory)
setwd( file.path(getwd(), directory) )
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #set the working directory to the same path as this file
#setwd("/public/data/shiny-server/untidywindrose") #used on EPA's internal shiny server

#' @title ui for untidywindrose.
#' @description
#' The Rshiny's UI object for untidywindrose
#' @param NA
#' @return NA
#' @noRd
   ui <- fluidPage( titlePanel(title = "untidywindrose",
                               windowTitle = "untidywindrose"),
                
   mainPanel(useShinyjs(),
             tags$img(src = "DataRUSLogo.bmp"),
             tags$p(),
             "See the", tags$a(href = "untidywindrose.html", "vignette for help"), 
              tags$br(),
              "For questions, comments or bug reports",
              tags$a(href = "mailto:mccrowey.clinton@epa.gov?subject=Rshiny
                               untidywindrose app","E-mail the author"),
              tags$p(),
                
              fileInput(inputId = "inputfile", label = "Select a file"),
              numericInput(inputId = "headerrows", label = "Ignore first N rows", value = 0, min = 0),
              selectInput(inputId = "header", label = "Does this file contain a header?",
                          choices = list(F,T)),
              selectInput(inputId = "transpose", label = "Transpose the data?",
                          choices = list(F,T)),
              radioButtons(inputId = "delim",
                           label = "File delimiter",
                           choices = list("tab (\"/t\")",
                                          "comma (\",\")",
                                          "semicolon (\";\")",
                                          "bar (\"|\")",
                                          "space (\" \")",
                                          "other delimter"
                                          ), 
                            selected = NULL
                            ),
              shinyjs::hidden(textInput(inputId = "delimother",
                                        label = "delimiter")),
              actionButton(inputId = "submit", label = "Submit"),
              shinyjs::hidden(selectInput(inputId = "windspeed",
                              label = "which column represents windspeed?",
                              choices = wbcolnames)
                              ),
              shinyjs::hidden(selectInput(inputId = "winddirection",
                              label = "which column represents wind direction?",
                              choices = wbcolnames)
                              ),
              shinyjs::hidden(selectInput(inputId = "outputext",
                                          label = "plot output extension?",
                                          choices = outputextnsions
                                          )
                              ),
              shinyjs::hidden(numericInput(inputId = "ws.int",
                                           label = "Wind speed interval",
                                           value = 2,
                                           min = 1
                                           )
                              ), 
              #shinyjs::hidden(numericInput(inputId="breaknumb", label="breaknumb", value=4, min=1)),
              #shinyjs::hidden(textInput(inputId = "breakpoints", label = "Windrose break points")),
              shinyjs::hidden(textInput(inputId = "units", label = "units")),
              shinyjs::hidden(actionButton(inputId = "submit2", label = "Display Plot")),
              shinyjs::hidden(downloadButton(outputId = "outfile", label = "Download Plot")),
              width = 3
             ),
      

   sidebarPanel(#dashboardSidebar(
                DT::dataTableOutput(outputId = "outputtable"),
                plotOutput(outputId = "wr"),
                           width = 9
                          )
                )
   )
               
#' @title server for untidywindrose.
#' @description The Rshiny's server object for untidywindrose
#' @param input the required rshiny input object
#' @param output the required rshiny output object
#' @param session the optional rshiny session object
#' @return NA
#' @noRd
   server <- function(input, output, session){
                      worksheet <- reactiveValues()
                      observeEvent(input$submit,{
                      shinyjs::show("windspeed")
                      shinyjs::show("winddirection")
                      shinyjs::show("outputext")
                      shinyjs::show("ws.int")
                     #shinyjs::show("breakpoints")
                     shinyjs::show("units")
                     #shinyjs::show("breaknumb")
                     delim <- input$delim
                     output$outputtable <- renderDataTable({
                     infile <- input$inputfile
                      switch(delim,
                             "tab (\"/t\")" = delim <- "\t",
                             "semicolon" = delim <- ";",
                             "comma (\",\")" = delim <- ",",
                             "semicolon (\";\")" = delim <- ";",
                             "bar (\"|\")" = delim <- "|",
                             "space (\" \")" = delim <- "",
                             "other delimter" = delim <- delim <- isolate(input$delimother),
                      warning("Invalid delim selected")
                     )
                    worksheet$wb <- isolate(read.delim(infile$datapath,
                                                       header = as.logical(input$header),
                                                       sep = delim,
                                                       skip = input$headerrows))
                    if (input$transpose == T)
                      {worksheet$wb <- t(isolate(worksheet$wb))}
                wbcolnames <- colnames(worksheet$wb)
                updateSelectInput(session = session, inputId = "windspeed",
                                  label = "which column represents windspeed?",
                                  choices = wbcolnames
                                  )
                updateSelectInput(session = session,
                                  inputId = "winddirection",
                                  label = "which column represents wind direction?",
                                  choices = wbcolnames
                                  )
                shinyjs::show("submit2")
                return(worksheet$wb)
                })
              })
              
              observeEvent(input$delim,{
              if (isolate(input$delim) == "other delimter") {
                    shinyjs::show("delimother") }
                    else {shinyjs::hide("delimother")}
              })
  
              observeEvent(input$submit2, {
              #shinyjs::hidden("outputtable")
              cbPalette <- c("#999999",
                             "#E69F00",
                             "#56B4E9",  #colorblind safer pallette
                             "#009E73",
                             "#F0E442",
                             "#0072B2",
                             "#D55E00",
                             "#CC79A7"
                             )
              output$wr <- renderPlot({plot(
                                    windRose(mydata = worksheet$wb,
                                     ws = isolate(input$windspeed),
                                     wd = isolate(input$winddirection),
                                     ws.int = isolate(input$ws.int),
                                     #breaks = isolate(input$breakpoints),
                                     auto.text = T,
                                     cols = cbPalette,
                                     paddle = T,
                                     bias.corr = F,
                                     statistic = "prop.count",
                                     key.position = "right",
                                     key.footer = 
                                         paste0("", isolate(input$units), ""),
                                                annotate = T
                                               )
                                              )
                                        }
                                       )
              
                output$outfile <- downloadHandler(
                  filename = function() {
                    if (isolate(input$outputext) == "png") { ext <- ".png"}
                    else if (isolate(input$outputext) == "bmp") {ext <- ".bmp"}
                    else if (isolate(input$outputext) == "jpeg") {ext <- ".jpeg"}
                    else if (isolate(input$outputext) == "tiff") {ext <- ".tiff"}
                    else if (isolate(input$outputext) == "eps") {ext <- ".eps"}
                    else if (isolate(input$outputext) == "pdf") {ext <- ".pdf"}
                    else if (isolate(input$outputext) == "ps") {ext <- ".ps"}
                    
                    return(paste0("windrose_", format(Sys.time(), format = "%m-%d-%Y_%H_%M"), ext))
                    },
                  
                  content = function(file) {
                    if (isolate(input$outputext) == "png") { png(file)}
                    else if (isolate(input$outputext) == "bmp") {bmp(file)}
                    else if (isolate(input$outputext) == "jpeg") {jpeg(file)}
                    else if (isolate(input$outputext) == "tiff") {tiff(file)}
                    else if (isolate(input$outputext) == "eps") {setEPS()
                                                                postscript(file)
                                                                }
                    else if (isolate(input$outputext) == "pdf") { pdf(file) }
                    else if (isolate(input$outputext) == "ps") {postscript(file)
                                                               }
                    cbPalette <- c("#999999",
                                   "#E69F00",
                                   "#56B4E9",  #colorblind safer pallette
                                   "#009E73",
                                   "#F0E442",
                                   "#0072B2",
                                   "#D55E00",
                                   "#CC79A7")
                   
                    plot(windRose(mydata = worksheet$wb,
                                  ws = isolate(input$windspeed),
                                  wd = isolate(input$winddirection),
                                  ws.int = isolate(input$ws.int),
                                  #breaks = isolate(input$breakpoints),
                                  auto.text = T,
                                  paddle = T,
                                  bias.corr = F,
                                  statistic = "prop.count",
                                  key.position = "right",
                                  key.footer = paste0("",
                                                      isolate(input$units), ""
                                                      ),
                                  cols = cbPalette,
                                  annotate = T
                                  )
                         )
                    dev.off()
                    }
                )
  })
  
  observeEvent(input$submit2,{shinyjs::show("outfile") })
}

#' @title shinyApp call for untidywindrose.
#' @description the call to shinyApp for untidywindrose
#' @param ui the required rshiny input object for untidywindrose
#' @param server the required rshiny input object for untidywindrose
#' @return NA
#' @noRd
shinyApp(ui = ui, server = server)
